package com.example.demo.entities;
// Generated Nov 29, 2019 10:10:07 PM by Hibernate Tools 5.1.7.Final

import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import javax.validation.constraints.Email;
import javax.validation.constraints.Max;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotEmpty;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;
import javax.validation.constraints.Size;

import org.hibernate.validator.constraints.Length;

/**
 * Account generated by hbm2java
 */
@Entity
@Table(name = "account", catalog = "testingdb", uniqueConstraints = @UniqueConstraint(columnNames = "USERNAME"))
public class Account implements java.io.Serializable {

	private Integer id;
	
	@NotEmpty
	@Length(min = 3, max =30)
	private String username;
	@NotEmpty
	@Length(min = 3, max =60)
	//@Pattern(regexp = "((?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%]).{6,200})")
	private String password;
	@NotEmpty
	@Length(min = 3, max =30)
	private String fullname;
	@Email
	private String email;
	@Min(1)
	@Max(100)
	private Integer age;

	private Boolean gender;
	@Length(min = 0, max =15)
	private String numberPhone;
	@Length(min = 0, max =100)
	private String address;

	private Integer gems;
	private Set<Feedback> feedbacksForToId = new HashSet<Feedback>(0);
	private Set<Feedback> feedbacksForFromId = new HashSet<Feedback>(0);
	private Set<InvoicePurchaseGems> invoicePurchaseGemsesForAccountId = new HashSet<InvoicePurchaseGems>(0);
	private Set<AccountRole> accountRoles = new HashSet<AccountRole>(0);
	private Set<Exam> exams = new HashSet<Exam>(0);
	private Set<InvoicePurchaseGems> invoicePurchaseGemsesForAccountAcceptId = new HashSet<InvoicePurchaseGems>(0);
	private Set<InvoiceSellGems> invoiceSellGemsesForAccountAcceptId = new HashSet<InvoiceSellGems>(0);
	private Set<InvoiceSellGems> invoiceSellGemsesForAccountId = new HashSet<InvoiceSellGems>(0);
	private Set<InvoiceBuyGems> invoiceBuyGemsesForAccountAcceptId = new HashSet<InvoiceBuyGems>(0);
	private Set<Question> questions = new HashSet<Question>(0);
	private Set<InvoiceBuyGems> invoiceBuyGemsesForAccountId = new HashSet<InvoiceBuyGems>(0);
	private Set<Cv> cvs = new HashSet<Cv>(0);

	public Account() {
	}

	public Account(String username, String password, String fullname, String email, Integer age, Boolean gender,
			String numberPhone, String address, Integer gems, Set<Feedback> feedbacksForToId,
			Set<Feedback> feedbacksForFromId, Set<InvoicePurchaseGems> invoicePurchaseGemsesForAccountId,
			Set<AccountRole> accountRoles, Set<Exam> exams,
			Set<InvoicePurchaseGems> invoicePurchaseGemsesForAccountAcceptId,
			Set<InvoiceSellGems> invoiceSellGemsesForAccountAcceptId,
			Set<InvoiceSellGems> invoiceSellGemsesForAccountId, Set<InvoiceBuyGems> invoiceBuyGemsesForAccountAcceptId,
			Set<Question> questions, Set<InvoiceBuyGems> invoiceBuyGemsesForAccountId, Set<Cv> cvs) {
		this.username = username;
		this.password = password;
		this.fullname = fullname;
		this.email = email;
		this.age = age;
		this.gender = gender;
		this.numberPhone = numberPhone;
		this.address = address;
		this.gems = gems;
		this.feedbacksForToId = feedbacksForToId;
		this.feedbacksForFromId = feedbacksForFromId;
		this.invoicePurchaseGemsesForAccountId = invoicePurchaseGemsesForAccountId;
		this.accountRoles = accountRoles;
		this.exams = exams;
		this.invoicePurchaseGemsesForAccountAcceptId = invoicePurchaseGemsesForAccountAcceptId;
		this.invoiceSellGemsesForAccountAcceptId = invoiceSellGemsesForAccountAcceptId;
		this.invoiceSellGemsesForAccountId = invoiceSellGemsesForAccountId;
		this.invoiceBuyGemsesForAccountAcceptId = invoiceBuyGemsesForAccountAcceptId;
		this.questions = questions;
		this.invoiceBuyGemsesForAccountId = invoiceBuyGemsesForAccountId;
		this.cvs = cvs;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "ID", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@Column(name = "USERNAME", unique = true, length = 50)
	public String getUsername() {
		return this.username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	@Column(name = "PASSWORD", length = 250)
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@Column(name = "FULLNAME", length = 200)
	public String getFullname() {
		return this.fullname;
	}

	public void setFullname(String fullname) {
		this.fullname = fullname;
	}

	@Column(name = "EMAIL", length = 200)
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Column(name = "AGE")
	public Integer getAge() {
		return this.age;
	}

	public void setAge(Integer age) {
		this.age = age;
	}

	@Column(name = "GENDER")
	public Boolean getGender() {
		return this.gender;
	}

	public void setGender(Boolean gender) {
		this.gender = gender;
	}

	@Column(name = "NUMBER_PHONE", length = 20)
	public String getNumberPhone() {
		return this.numberPhone;
	}

	public void setNumberPhone(String numberPhone) {
		this.numberPhone = numberPhone;
	}

	@Column(name = "ADDRESS", length = 250)
	public String getAddress() {
		return this.address;
	}

	public void setAddress(String address) {
		this.address = address;
	}

	@Column(name = "GEMS")
	public Integer getGems() {
		return this.gems;
	}

	public void setGems(Integer gems) {
		this.gems = gems;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "accountByToId")
	public Set<Feedback> getFeedbacksForToId() {
		return this.feedbacksForToId;
	}

	public void setFeedbacksForToId(Set<Feedback> feedbacksForToId) {
		this.feedbacksForToId = feedbacksForToId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "accountByFromId")
	public Set<Feedback> getFeedbacksForFromId() {
		return this.feedbacksForFromId;
	}

	public void setFeedbacksForFromId(Set<Feedback> feedbacksForFromId) {
		this.feedbacksForFromId = feedbacksForFromId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "accountByAccountId")
	public Set<InvoicePurchaseGems> getInvoicePurchaseGemsesForAccountId() {
		return this.invoicePurchaseGemsesForAccountId;
	}

	public void setInvoicePurchaseGemsesForAccountId(Set<InvoicePurchaseGems> invoicePurchaseGemsesForAccountId) {
		this.invoicePurchaseGemsesForAccountId = invoicePurchaseGemsesForAccountId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "account")
	public Set<AccountRole> getAccountRoles() {
		return this.accountRoles;
	}

	public void setAccountRoles(Set<AccountRole> accountRoles) {
		this.accountRoles = accountRoles;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "account")
	public Set<Exam> getExams() {
		return this.exams;
	}

	public void setExams(Set<Exam> exams) {
		this.exams = exams;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "accountByAccountAcceptId")
	public Set<InvoicePurchaseGems> getInvoicePurchaseGemsesForAccountAcceptId() {
		return this.invoicePurchaseGemsesForAccountAcceptId;
	}

	public void setInvoicePurchaseGemsesForAccountAcceptId(
			Set<InvoicePurchaseGems> invoicePurchaseGemsesForAccountAcceptId) {
		this.invoicePurchaseGemsesForAccountAcceptId = invoicePurchaseGemsesForAccountAcceptId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "accountByAccountAcceptId")
	public Set<InvoiceSellGems> getInvoiceSellGemsesForAccountAcceptId() {
		return this.invoiceSellGemsesForAccountAcceptId;
	}

	public void setInvoiceSellGemsesForAccountAcceptId(Set<InvoiceSellGems> invoiceSellGemsesForAccountAcceptId) {
		this.invoiceSellGemsesForAccountAcceptId = invoiceSellGemsesForAccountAcceptId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "accountByAccountId")
	public Set<InvoiceSellGems> getInvoiceSellGemsesForAccountId() {
		return this.invoiceSellGemsesForAccountId;
	}

	public void setInvoiceSellGemsesForAccountId(Set<InvoiceSellGems> invoiceSellGemsesForAccountId) {
		this.invoiceSellGemsesForAccountId = invoiceSellGemsesForAccountId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "accountByAccountAcceptId")
	public Set<InvoiceBuyGems> getInvoiceBuyGemsesForAccountAcceptId() {
		return this.invoiceBuyGemsesForAccountAcceptId;
	}

	public void setInvoiceBuyGemsesForAccountAcceptId(Set<InvoiceBuyGems> invoiceBuyGemsesForAccountAcceptId) {
		this.invoiceBuyGemsesForAccountAcceptId = invoiceBuyGemsesForAccountAcceptId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "account")
	public Set<Question> getQuestions() {
		return this.questions;
	}

	public void setQuestions(Set<Question> questions) {
		this.questions = questions;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "accountByAccountId")
	public Set<InvoiceBuyGems> getInvoiceBuyGemsesForAccountId() {
		return this.invoiceBuyGemsesForAccountId;
	}

	public void setInvoiceBuyGemsesForAccountId(Set<InvoiceBuyGems> invoiceBuyGemsesForAccountId) {
		this.invoiceBuyGemsesForAccountId = invoiceBuyGemsesForAccountId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "account")
	public Set<Cv> getCvs() {
		return this.cvs;
	}

	public void setCvs(Set<Cv> cvs) {
		this.cvs = cvs;
	}

}
